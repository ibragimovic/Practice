1. Исключение - это нештатная ситуация, ошибка во время выполнения программы. Самый простой пример - деление на ноль.
Можно вручную отслеживать возникновение подобных ошибок, а можно воспользоваться специальным механизмом исключений,
который упрощает создание больших надёжных программ, уменьшает объём необходимого кода и повышает уверенность в том,
что в приложении не будет необработанной ошибки.
2. - NotFoundException;
- NullPointerException;
- IOException;
3. Базовым классом для всех исключений является класс Throwable. От него уже наследуются два класса: Error и Exception.
Все остальные классы являются производными от этих двух классов.  Класс Error описывает внутренние ошибки в
исполняющей среде Java. Программист имеет очень ограниченные возможности для обработки подобных ошибок.
Собственно исключения наследуются от класса Exception. Среди этих исключений следует выделить класс RuntimeException.
RuntimeException является базовым классом для так называемой группы непроверяемых исключений (unchecked exceptions) -
компилятор не проверяет факт обработки таких исключений и их можно не указывать вместе с оператором throws в объявлении
метода. Такие исключения являются следствием ошибок разработчика, например, неверное преобразование типов или выход
за пределы массива.
Некоторые из классов непроверяемых исключений:
    - ArithmeticException: исключение, возникающее при делении на ноль
    - IndexOutOfBoundException: индекс вне границ массива
    - IllegalArgumentException: использование неверного аргумента при вызове метода
    - NullPointerException: использование пустой ссылки
    - NumberFormatException: ошибка преобразования строки в число
Все остальные классы, образованные от класса Exception, называются проверяемыми исключениями (checked exceptions).
Некоторые из классов проверяемых исключений:
    - CloneNotSupportedException: класс, для объекта которого вызывается клонирование, не реализует интерфейс Cloneable
    - InterruptedException: поток прерван другим потоком
    - ClassNotFoundException: невозможно найти класс
Подобные исключения обрабатываются с помощью конструкции try..catch. Либо можно передать обработку методу,
который будет вызывать данный метод, указав исключения после оператора throws.
4. - Программа может не запуститься;
- Могут возникунуть ошибки в программе;
5. try – определяет блок кода, в котором может произойти исключение;
   catch – определяет блок кода, в котором происходит обработка исключения;
   finally – определяет блок кода, который является необязательным, но при его наличии выполняется в любом случае
   независимо от результатов выполнения блока try.